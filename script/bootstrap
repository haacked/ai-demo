#!/usr/bin/env bash
#/ Usage: script/bootstrap [-d|--domain <domain>] [--no-install]
#/ Description: Bootstraps the development environment
#/ Options:
#/   -d, --domain <domain>  The ngrok domain to use for your local development environment.
#/   --no-install          Do not install dependencies, just bail if they aren't present. Useful for CI environments.
source ./script/helpers/_utils.sh
set_source_and_root_dir

install=false

# Assign command line arguments to variables
while (( "$#" )); do
  key="$1"
  shift
  case "$key" in
    -d|--domain)
      ngrok_domain="${1:-}"
    ;;
    --no-install)
      install=false
    ;;
    -\?|-h|--help)
      grep '^#/' <"$0" | cut -c4-
      exit
    ;;
  esac
done

echo "Bootstrapping AIDemo..."

if $install && ! type brew >/dev/null 2>&1; then
  fatal "🚨Can't auto-install dependencies. You don't have homebrew installed. Please install it and try again."
else
  echo "✅Brew installed."
fi

# Install Homebrew dependencies
brew_install_if_missing docker
brew_install_if_missing ngrok

# Install Bun (requires special tap)
if ! type bun >/dev/null 2>&1; then
  echo "Installing Bun..."
  brew tap oven-sh/bun
  brew install bun
else
  echo "✅Bun installed."
fi

# Now set up configuration

if [ -f "$HOME/Library/Application Support/ngrok/ngrok.yml" ]; then
  echo "✅Found existing ngrok configuration. Skipping…"
else
  echo "⚠️I need your ngrok auth token."
  echo "Go to https://dashboard.ngrok.com/get-started/your-authtoken and copy it."
  read -s -r -p "Then paste it right here (it won't be echoed): " ngrok_auth_token
  echo
  ngrok config add-authtoken $ngrok_auth_token
fi

# Check for .NET installation
if ! type dotnet >/dev/null; then
  fatal "🚨.NET SDK is required. Please install the latest version and try again."
else
  echo "✅Found .NET SDK."
fi

# Check for required Bluesky environment variables
if [ -z "$BLUESKY_PASSWORD" ]; then
  echo "⚠️BLUESKY_APP_KEY is not set."
  echo "Go to https://bsky.app/settings/app-passwords and create an app password."
  read -s -r -p "Enter your Bluesky app password: " BLUESKY_APP_KEY
  echo
  export BLUESKY_PASSWORD
fi

if [ -z "$BLUESKY_USERNAME" ]; then
  echo "⚠️BLUESKY_USERNAME is not set."
  read -r -p "Enter your Bluesky handle (e.g., haacked.com): " BLUESKY_USERNAME
  # Remove @ symbol if present
  BLUESKY_USERNAME="${BLUESKY_USERNAME#@}"
  export BLUESKY_USERNAME
fi

# Offer to write Bluesky environment variables to shell config
if [ -n "$BLUESKY_USERNAME" ] && [ -n "$BLUESKY_PASSWORD" ]; then
  read -r -p "Would you like to save these Bluesky credentials to your shell configuration? (y/n): " save_credentials
  if [[ $save_credentials =~ ^[Yy]$ ]]; then
    # Detect shell and set appropriate config file
    case "$SHELL" in
      */zsh)
        config_file="$HOME/.zshrc"
        ;;
      */bash)
        if [ "$(uname)" = "Darwin" ]; then
          config_file="$HOME/.bash_profile"
        else
          config_file="$HOME/.bashrc"
        fi
        ;;
      */fish)
        config_file="$HOME/.config/fish/config.fish"
        mkdir -p "$(dirname "$config_file")"
        ;;
      *)
        echo "⚠️Unsupported shell: $SHELL"
        echo "Please manually add these variables to your shell configuration:"
        echo "export BLUESKY_USERNAME=\"$BLUESKY_USERNAME\""
        echo "export BLUESKY_PASSWORD=\"$BLUESKY_PASSWORD\""
        exit 0
        ;;
    esac

    # Check if variables already exist in config file
    if [[ "$SHELL" == *"/fish" ]]; then
      if grep -q "set -x BLUESKY_USERNAME" "$config_file" 2>/dev/null; then
        echo "✅Bluesky credentials already exist in $config_file"
        exit 0
      fi
    else
      if grep -q "export BLUESKY_USERNAME" "$config_file" 2>/dev/null; then
        echo "✅Bluesky credentials already exist in $config_file"
        exit 0
      fi
    fi

    # Write variables to config file
    echo "# Bluesky MCP Server Environment Variables" >> "$config_file"
    if [[ "$SHELL" == *"/fish" ]]; then
      echo "set -x BLUESKY_USERNAME \"$BLUESKY_USERNAME\"" >> "$config_file"
      echo "set -x BLUESKY_PASSWORD \"$BLUESKY_PASSWORD\"" >> "$config_file"
    else
      echo "export BLUESKY_USERNAME=\"$BLUESKY_USERNAME\"" >> "$config_file"
      echo "export BLUESKY_PASSWORD=\"$BLUESKY_PASSWORD\"" >> "$config_file"
    fi

    echo "✅Bluesky credentials saved to $config_file"
    echo "Run 'source $config_file' to load them in your current session."
  fi
fi

